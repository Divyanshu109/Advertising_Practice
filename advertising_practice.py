# -*- coding: utf-8 -*-
"""Advertising_Practice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10Vlq0CSXKEjCsnFN8g3ZSslQexlc80wV
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
import statsmodels.api as sm
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from sklearn.linear_model import LinearRegression 
from sklearn.linear_model import LogisticRegression

ads=pd.read_csv('advertising.csv')

ads.head()

ads.info()

ads.describe()

sns.regplot(ads.TV,ads.Sales)

sns.regplot(ads.Radio,ads.Sales)

sns.regplot(ads.Newspaper,ads.Sales)

sns.heatmap(ads.corr(),annot=True)

sns.pairplot( data=ads, 
             x_vars=['TV','Radio','Newspaper'],y_vars='Sales')

sns.regplot(data=ads, x='TV',y='Sales')

"""### In our case we are using Simple Linear Regression
##  Y = m*TV+ c

# Steps
1. Create X and Y
2. Create train and Test set
3. Train Model on Training set to learn the coff 
4. Evaluate the model
"""

# -- X and Y 

X=ads['TV']
y=ads.Sales

X.head()

# Train Test Split

X_train,X_test, y_train,y_test= train_test_split(X,y,test_size=.25,random_state=100,shuffle=True,)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

X_train

# Training the Model


X_train_sm=sm.add_constant(X_train)

X_train_sm.head()

"""## OLS means Ordinary Least Square"""

lr= sm.OLS(y_train,X_train_sm)
lr_model=lr.fit()
lr_model.params

lr_model.summary()

y_train_prd= lr_model.predict(X_train_sm)
plt.scatter(X_train,y_train)
plt.plot(X_train, y_train_prd,'black')
plt.show()

"""## Residual Analysis"""



y_train_prd

res=y_train-y_train_prd

res

sns.distplot(res)

plt.scatter(X_train,res)
sns.regplot(X_train,res)

"""## Predict and Evaluate the Test Set"""

X_test_sm=sm.add_constant(X_test)

y_test_pred=lr_model.predict(X_test_sm)

y_test_pred.head()

r2=r2_score(y_train,y_train_prd)
print(r2*100)

r2=r2_score(y_test,y_test_pred)
print(r2*100)

MSE_test=mean_squared_error(y_train,y_train_prd)
print(MSE_test)

MSE_test=mean_squared_error(y_test,y_test_pred)
print(MSE_test)

plt.scatter(X_test,y_test)
plt.plot(X_test,y_test_pred,'r');

"""## Working on sklearn lib"""

X_train,X_test,y_train,y_test=train_test_split(X,y,train_size=.7,random_state=150)

X_train_lm=X_train.values.reshape(-1,1)
X_test_lm=X_test.values.reshape(-1,1)

print(X_train_lm.shape)
print(X_test_lm.shape)
print(y_train.shape)
print(y_test.shape)

lm=LinearRegression()
lm.fit(X_train_lm,y_train)

lm.coef_

lm.intercept_

# Prediction

y_train_pred=lm.predict(X_train_lm)
y_test_pred=lm.predict(X_test_lm)

r2_train=r2_score(y_train,y_train_pred)
r2_test=r2_score(y_test,y_test_pred)

print("Train R2-->", r2_train)
print("Test R2-->",r2_test)

